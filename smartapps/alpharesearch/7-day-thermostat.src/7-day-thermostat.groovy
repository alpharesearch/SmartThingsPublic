/* **DISCLAIMER**
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
 * 1. the software will meet your requirements or expectations;
 * 2. the software or the software content will be free of bugs, errors, viruses or other defects;
 * 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
 * 4. the software will be compatible with third party software;
 * 5. any errors in the software will be corrected.
 * The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
 */ 
 
/**
 *  7 Day Thermostat
 *
 * Base code from mwoodengr@hotmail.com, bugfixed and enhanced by alpharesearch.
 *
 */
definition(
    name: "7 Day Thermostat",
    namespace: "alpharesearch",
    author: "Alpharesearch",
    description: "Weekday and Weekend Thermostat",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@3x.png")

preferences {
    section("Monitor the temperature...") {
        input "temperatureSensor1", "capability.temperatureMeasurement"
    }
    section("Change HVAC mode to heat when the outside temperature <=...") {
        input "temperature1", "number", title: "Temp Degrees Fahrenheit?", defaultValue: "50"
    }
    section("Choose thermostat... ") {
        input "thermostat", "capability.thermostat"
    }
    section("Monday thru Friday Schedule") {
        input ("timeWake", "time", title: "Wake Time of Day", defaultValue: "5:30")	
        input ("tempSetpointWakeHeat", "number", title: "Wake Heat Temp Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointWakeCool", "number", title: "Wake Cool Temp Degrees Fahrenheit?", defaultValue: "78")
        input ("timeLeave", "time", title: "Leave Time of Day", defaultValue: "7:30")
        input ("tempSetpointLeaveHeat", "number", title: "Leave Heat Temp Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointLeaveCool", "number", title: "Leave Cool Temp Degrees Fahrenheit?", defaultValue: "78")
        input ("timeReturn", "time", title: "Return Time of Day", defaultValue: "17:30")
        input ("tempSetpointReturnHeat", "number", title: "Return Heat Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointReturnCool", "number", title: "Return Cool Degrees Fahrenheit?", defaultValue: "78")
        input ("timeSleep", "time", title: "Sleep Time of Day", defaultValue: "22:30")
        input ("tempSetpointSleepHeat", "number", title: "Sleep Heat Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointSleepCool", "number", title: "Sleep Cool Degrees Fahrenheit?", defaultValue: "78")
    }
    section("Saturday and Sunday Schedule") {
        input ("timeWakeWE", "time", title: "Wake Time of Day", defaultValue: "9:30")	
        input ("tempSetpointWakeHeatWE", "number", title: "Wake Heat Temp Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointWakeCoolWE", "number", title: "Wake Cool Temp Degrees Fahrenheit?", defaultValue: "78")
        input ("timeLeaveWE", "time", title: "Leave Time of Day", defaultValue: "11:30")
        input ("tempSetpointLeaveHeatWE", "number", title: "Leave Heat Temp Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointLeaveCoolWE", "number", title: "Leave Cool Temp Degrees Fahrenheit?", defaultValue: "78")
        input ("timeReturnWE", "time", title: "Return Time of Day", defaultValue: "16:30")
        input ("tempSetpointReturnHeatWE", "number", title: "Return Heat Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointReturnCoolWE", "number", title: "Return Cool Degrees Fahrenheit?", defaultValue: "78")
        input ("timeSleepWE", "time", title: "Sleep Time of Day", defaultValue: "23:30")
        input ("tempSetpointSleepHeatWE", "number", title: "Sleep Heat Degrees Fahrenheit?", defaultValue: "72")
        input ("tempSetpointSleepCoolWE", "number", title: "Sleep Cool Degrees Fahrenheit?", defaultValue: "78")
    }
}

def installed()
{
    schedule(timeWake, "initialize")
    schedule(timeLeave, "initialize")
    schedule(timeReturn, "initialize")
    schedule(timeSleep, "initialize")
    schedule(timeWakeWE, "initialize")
    schedule(timeLeaveWE, "initialize")
    schedule(timeReturnWE, "initialize")
    schedule(timeSleepWE, "initialize")
    subscribe(temperatureSensor1, "temperature", temperatureHandler)
    subscribe(thermostat, "thermostat", thermostatHandler)
    subscribe(thermostat, "tempSetpointWakeHeat", HeatingSetpoint1Handler)
    subscribe(thermostat, "tempSetpointLeaveHeat", HeatingSetpoint2Handler)
    subscribe(thermostat, "tempSetpointReturnHeat", HeatingSetpoint3Handler)
    subscribe(thermostat, "tempSetpointSleepHeat", HeatingSetpoint4Handler)

    subscribe(thermostat, "tempSetpointWakeHeatWE", HeatingSetpoint11Handler)
    subscribe(thermostat, "tempSetpointLeaveHeatWE", HeatingSetpoint21Handler)
    subscribe(thermostat, "tempSetpointReturnHeatWE", HeatingSetpoint31Handler)
    subscribe(thermostat, "tempSetpointSleepHeatWE", HeatingSetpoint41Handler)
 
    subscribe(thermostat, "tempSetpointWakeCool", CoolingSetpoint1Handler)
    subscribe(thermostat, "tempSetpointLeaveCool", CoolingSetpoint2Handler)
    subscribe(thermostat, "tempSetpointReturnCool", CoolingSetpoint3Handler)
    subscribe(thermostat, "tempSetpointSleepCool", CoolingSetpoint4Handler)

    subscribe(thermostat, "tempSetpointWakeCoolWE", CoolingSetpointA1Handler)
    subscribe(thermostat, "tempSetpointLeaveCoolWE", CoolingSetpointA2Handler)
    subscribe(thermostat, "tempSetpointReturnCoolWE", CoolingSetpointA3Handler)
    subscribe(thermostat, "tempSetpointSleepCoolWE", CoolingSetpointA4Handler)
    initialize()
}

def updated()
{
    unsubscribe()
    schedule(timeWake, "initialize")
    schedule(timeLeave, "initialize")
    schedule(timeReturn, "initialize")
    schedule(timeSleep, "initialize")
    schedule(timeWakeWE, "initialize")
    schedule(timeLeaveWE, "initialize")
    schedule(timeReturnWE, "initialize")
    schedule(timeSleepWE, "initialize")
    subscribe(temperatureSensor1, "temperature", temperatureHandler)
    subscribe(thermostat, "thermostat", thermostatHandler)
    subscribe(thermostat, "tempSetpointWakeHeat", HeatingSetpoint1Handler)
    subscribe(thermostat, "tempSetpointLeaveHeat", HeatingSetpoint2Handler)
    subscribe(thermostat, "tempSetpointReturnHeat", HeatingSetpoint3Handler)
    subscribe(thermostat, "tempSetpointSleepHeat", HeatingSetpoint4Handler)

    subscribe(thermostat, "tempSetpointWakeHeatWE", HeatingSetpoint11Handler)
    subscribe(thermostat, "tempSetpointLeaveHeatWE", HeatingSetpoint21Handler)
    subscribe(thermostat, "tempSetpointReturnHeatWE", HeatingSetpoint31Handler)
    subscribe(thermostat, "tempSetpointSleepHeatWE", HeatingSetpoint41Handler)
 
    subscribe(thermostat, "tempSetpointWakeCool", CoolingSetpoint1Handler)
    subscribe(thermostat, "tempSetpointLeaveCool", CoolingSetpoint2Handler)
    subscribe(thermostat, "tempSetpointReturnCool", CoolingSetpoint3Handler)
    subscribe(thermostat, "tempSetpointSleepCool", CoolingSetpoint4Handler)

    subscribe(thermostat, "tempSetpointWakeCoolWE", CoolingSetpointA1Handler)
    subscribe(thermostat, "tempSetpointLeaveCoolWE", CoolingSetpointA2Handler)
    subscribe(thermostat, "tempSetpointReturnCoolWE", CoolingSetpointA3Handler)
    subscribe(thermostat, "tempSetpointSleepCoolWE", CoolingSetpointA4Handler)
    unschedule()
    initialize()
}
def modeChangeHandler(evt) {
	log.debug "Reinitializing thermostats on mode change notification, new mode $evt.value"
	//sendNotificationEvent("$thermostats Reinitializing on mode change notification, new mode $evt.value")
    initialize()
}
// This section sets the HVAC mode based outside temperature. HVAC fan mode is set to "auto".
def temperatureHandler(evt) {
    def lastTemp = temperatureSensor1.currentTemperature
    log.debug "temperature is: $lastTemp"
    if (lastTemp <= temperature1) {
        def thermostatState = thermostat.currentthermostatMode
        def thermostatFan = thermostat.currentthermostatFanMode
        if (thermostatState == "cool"){
            def hvacmode = "heat"
            log.debug "HVAC mode set to $hvacmode"
            log.debug "HVAC Fan mode set to $thermostatFan"
            thermostat.setThermostatMode(hvacmode)
            if (thermostatFan != "auto"){
                thermostat.setThermostatFanMode("auto")
                log.debug "HVAC fan mode set to auto"
            }
        }
        else if (thermostatFan != "auto"){
            thermostat.setThermostatFanMode("auto")
            log.debug "HVAC fan mode set to auto"
        }
	else {          
            if (thermostatState == "heat"){
                def hvacmode = "cool"
                log.debug "HVAC mode set to $hvacmode"
                thermostat.setThermostatMode(hvacmode)
            }
            if (thermostatFan != "auto"){
                thermostat.setThermostatFanMode("auto")
                log.debug "HVAC fan mode set to auto"
            }
        }
    }
}

// This section determines which day it is.
def initialize() {
	
    def calendar = Calendar.getInstance()
    calendar.setTimeZone(TimeZone.getTimeZone("GMT-5"))
    def today = calendar.get(Calendar.DAY_OF_WEEK)
    log.debug("today=${today}")

    def todayValid = null
    switch (today) {
    case Calendar.MONDAY:
        todayValid = days.find{it.equals("Monday")}
        today = "Monday"
        log.debug("today is Monday")
        break
    case Calendar.TUESDAY:
        todayValid = days.find{it.equals("Tuesday")}
        today = "Tuesday"
        log.debug("today is Tuesday")
        break
    case Calendar.WEDNESDAY:
        todayValid = days.find{it.equals("Wednesday")}
        log.debug("today is Wednesday")
        today = "Wednesday"
        break
    case Calendar.THURSDAY:
        todayValid = days.find{it.equals("Thursday")}
        today = "Thursday"
        log.debug("today is Thursday")
        break
    case Calendar.FRIDAY:
        todayValid = days.find{it.equals("Friday")}
        today = "Friday"
        log.debug("today is Friday")
        break
    case Calendar.SATURDAY:
        todayValid = days.find{it.equals("Saturday")}
        log.debug("today is Saturday")
        today = "Saturday"
        break
    case Calendar.SUNDAY:
        todayValid = days.find{it.equals("Sunday")}
        log.debug("today is Sunday")
        today = "Sunday"
        break
    }
    
    log.debug("The day is $today")

    // This section is where the time/temperature shcedule is set.
    if (today == "Monday") {
        schedule(timeWake, changetempWeekWake)
        schedule(timeLeave, changetempWeekEndLeave)
        schedule(timeReturn, changetempWeekReturn)
        schedule(timeSleep, changetempWeekSleep)
    }
    if (today =="Tuesday") {
    	schedule(timeWake, changetempWeekWake)
        schedule(timeLeave, changetempWeekEndLeave)
        schedule(timeReturn, changetempWeekReturn)
        schedule(timeSleep, changetempWeekSleep)
    }
    if (today =="Wednesday") {
    	schedule(timeWake, changetempWeekWake)
        schedule(timeLeave, changetempWeekEndLeave)
        schedule(timeReturn, changetempWeekReturn)
        schedule(timeSleep, changetempWeekSleep)
    }
    if (today =="Thrusday") {
    	schedule(timeWake, changetempWeekWake)
        schedule(timeLeave, changetempWeekEndLeave)
        schedule(timeReturn, changetempWeekReturn)
        schedule(timeSleep, changetempWeekSleep)
    }
    if (today =="Friday") {
    	schedule(timeWake, changetempWeekWake)
        schedule(timeLeave, changetempWeekEndLeave)
        schedule(timeReturn, changetempWeekReturn)
        schedule(timeSleep, changetempWeekSleep)
    }
    if (today =="Saturday") {
        schedule(timeWakeWE, changetempWeekEndWake)
        schedule(timeLeaveWE, changetempWeekEndLeave)
        schedule(timeReturnWE, changetempWeekEndReturn)
        schedule(timeSleepWE, changetempWeekEndSleep)
    }
    if (today =="Sunday") {
    	schedule(timeWakeWE, changetempWeekEndWake)
        schedule(timeLeaveWE, changetempWeekEndLeave)
        schedule(timeReturnWE, changetempWeekEndReturn)
        schedule(timeSleepWE, changetempWeekEndSleep)
    }
}

// This section is where the thermostat temperature settings are set. 
def changetempWeekWake() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointWakeHeat)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointWakeCool)
    }
}
def changetempWeekLeave() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointLeaveHeat)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointLeaveCool)
    }
}
def changetempWeekReturn() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointReturnHeat)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointReturnCool)
    }
}
def changetempWeekSleep() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointSleepHeat)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointSleepCool)
    }
}

def changetempWeekEndWake() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointWakeHeatWE)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointWakeCoolWE)
    }
}
def changetempWeekEndLeave() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointLeaveHeatWE)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointLeaveCoolWE)
    }
}
def changetempWeekEndReturn() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointReturnHeatWE)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointReturnCoolWE)
    }
}
def changetempWeekEndSleep() {
    def thermostatState = thermostat.currentthermostatMode
    log.debug "checking mode request = $thermostatState"
    if (thermostatState == "heat"){
	thermostat.setHeatingSetpoint(tempSetpointSleepHeatWE)
    }
    else {
	thermostat.setCoolingSetpoint(tempSetpointSleepCoolWE)
    }
}